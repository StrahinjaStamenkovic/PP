
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 17 19:50:05 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 17 19:50:05 CET 2021
  */
public class MPParserRecovery extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserRecovery() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserRecovery(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\004\006\000\002\004\006" +
    "\000\002\004\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\002\000\002\007\006\000\002\007\006\000\002" +
    "\007\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\006\004\000" +
    "\002\006\003\000\002\012\003\000\002\012\006\000\002" +
    "\012\005\000\002\012\004\000\002\012\003\000\002\013" +
    "\010\000\002\013\010\000\002\013\007\000\002\013\006" +
    "\000\002\013\004\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\014\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\015\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\004\005\001\002\000\004\002\117\001" +
    "\002\000\006\003\006\006\010\001\002\000\004\002\ufffe" +
    "\001\002\000\006\003\115\005\116\001\002\000\012\003" +
    "\011\006\ufff8\013\ufff8\021\ufff8\001\002\000\020\003\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\013\ufffb\021\ufffb\022\ufffb\001" +
    "\002\000\012\003\023\006\010\013\022\021\013\001\002" +
    "\000\012\003\104\013\026\033\032\035\027\001\002\000" +
    "\016\003\uffe6\006\uffe6\007\uffe6\013\uffe6\021\uffe6\022\uffe6" +
    "\001\002\000\010\003\070\010\071\012\067\001\002\000" +
    "\014\003\064\006\010\007\066\013\063\021\013\001\002" +
    "\000\016\003\uffea\006\uffea\007\uffea\013\uffea\021\uffea\022" +
    "\uffea\001\002\000\012\003\ufffa\006\ufffa\013\ufffa\021\ufffa" +
    "\001\002\000\014\003\uffeb\006\uffeb\007\uffeb\013\uffeb\021" +
    "\uffeb\001\002\000\012\003\024\010\ufff1\012\ufff1\020\025" +
    "\001\002\000\012\003\ufff9\006\ufff9\013\ufff9\021\ufff9\001" +
    "\002\000\016\003\uffe7\006\uffe7\007\uffe7\013\uffe7\021\uffe7" +
    "\022\uffe7\001\002\000\012\003\033\013\026\033\032\035" +
    "\027\001\002\000\032\003\uffcf\010\uffcf\011\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\034\uffcf\001\002\000\032\003\uffce\010\uffce\011\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\034\uffce\001\002\000\016\003\uffd9\010\uffd9" +
    "\011\uffd9\023\uffd9\024\uffd9\034\uffd9\001\002\000\032\003" +
    "\uffd6\010\uffd6\011\uffd6\023\uffd6\024\uffd6\025\060\026\055" +
    "\027\052\030\057\031\056\032\054\034\uffd6\001\002\000" +
    "\012\003\047\013\026\033\032\035\027\001\002\000\016" +
    "\003\uffe8\006\uffe8\007\uffe8\013\uffe8\021\uffe8\022\uffe8\001" +
    "\002\000\010\003\043\011\042\023\044\001\002\000\016" +
    "\003\036\010\uffdd\011\uffdd\023\uffdd\024\037\034\uffdd\001" +
    "\002\000\016\003\uffda\010\uffda\011\uffda\023\uffda\024\uffda" +
    "\034\uffda\001\002\000\012\003\041\013\026\033\032\035" +
    "\027\001\002\000\016\003\uffdc\010\uffdc\011\uffdc\023\uffdc" +
    "\024\uffdc\034\uffdc\001\002\000\016\003\uffdb\010\uffdb\011" +
    "\uffdb\023\uffdb\024\uffdb\034\uffdb\001\002\000\016\003\uffe9" +
    "\006\uffe9\007\uffe9\013\uffe9\021\uffe9\022\uffe9\001\002\000" +
    "\014\003\uffde\010\uffde\011\uffde\023\uffde\034\uffde\001\002" +
    "\000\012\003\045\013\026\033\032\035\027\001\002\000" +
    "\014\003\uffdf\010\uffdf\011\uffdf\023\uffdf\034\uffdf\001\002" +
    "\000\016\003\036\010\uffe0\011\uffe0\023\uffe0\024\037\034" +
    "\uffe0\001\002\000\032\003\uffcc\010\uffcc\011\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\034\uffcc\001\002\000\010\003\043\023\044\034\051" +
    "\001\002\000\032\003\uffcd\010\uffcd\011\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\034\uffcd\001\002\000\012\003\uffd3\013\uffd3\033\uffd3\035" +
    "\uffd3\001\002\000\012\003\062\013\026\033\032\035\027" +
    "\001\002\000\012\003\uffd0\013\uffd0\033\uffd0\035\uffd0\001" +
    "\002\000\012\003\uffd4\013\uffd4\033\uffd4\035\uffd4\001\002" +
    "\000\012\003\uffd1\013\uffd1\033\uffd1\035\uffd1\001\002\000" +
    "\012\003\uffd2\013\uffd2\033\uffd2\035\uffd2\001\002\000\012" +
    "\003\uffd5\013\uffd5\033\uffd5\035\uffd5\001\002\000\016\003" +
    "\uffd8\010\uffd8\011\uffd8\023\uffd8\024\uffd8\034\uffd8\001\002" +
    "\000\016\003\uffd7\010\uffd7\011\uffd7\023\uffd7\024\uffd7\034" +
    "\uffd7\001\002\000\006\003\024\020\025\001\002\000\020" +
    "\003\ufffc\005\ufffc\006\ufffc\007\ufffc\013\ufffc\021\ufffc\022" +
    "\ufffc\001\002\000\014\003\uffec\006\uffec\007\uffec\013\uffec" +
    "\021\uffec\001\002\000\020\003\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\013\ufffd\021\ufffd\022\ufffd\001\002\000\006\003\103" +
    "\013\102\001\002\000\010\003\ufff2\010\ufff2\012\ufff2\001" +
    "\002\000\014\003\074\014\072\015\077\016\075\017\076" +
    "\001\002\000\006\003\ufff0\011\ufff0\001\002\000\006\003" +
    "\101\011\100\001\002\000\012\003\ufff5\006\ufff5\013\ufff5" +
    "\021\ufff5\001\002\000\006\003\uffee\011\uffee\001\002\000" +
    "\006\003\uffed\011\uffed\001\002\000\006\003\uffef\011\uffef" +
    "\001\002\000\012\003\ufff7\006\ufff7\013\ufff7\021\ufff7\001" +
    "\002\000\012\003\ufff6\006\ufff6\013\ufff6\021\ufff6\001\002" +
    "\000\010\003\ufff4\010\ufff4\012\ufff4\001\002\000\010\003" +
    "\ufff3\010\ufff3\012\ufff3\001\002\000\016\003\uffe1\006\uffe1" +
    "\007\uffe1\013\uffe1\021\uffe1\022\uffe1\001\002\000\010\003" +
    "\043\010\106\023\044\001\002\000\012\003\107\006\010" +
    "\013\063\021\013\001\002\000\016\003\uffe2\006\uffe2\007" +
    "\uffe2\013\uffe2\021\uffe2\022\uffe2\001\002\000\006\003\111" +
    "\022\112\001\002\000\016\003\uffe3\006\uffe3\007\uffe3\013" +
    "\uffe3\021\uffe3\022\uffe3\001\002\000\012\003\113\006\010" +
    "\013\063\021\013\001\002\000\016\003\uffe4\006\uffe4\007" +
    "\uffe4\013\uffe4\021\uffe4\022\uffe4\001\002\000\016\003\uffe5" +
    "\006\uffe5\007\uffe5\013\uffe5\021\uffe5\022\uffe5\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\011\001\001\000\002\001\001\000\016\004" +
    "\013\006\015\007\017\010\014\012\020\013\016\001\001" +
    "\000\012\014\104\015\034\016\027\020\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\013\012\064" +
    "\013\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\033\015\034\016\027\020\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\052\001\001\000\012\014\047\015\034\016" +
    "\027\020\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\037\020" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\045\016\027\020" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\013" +
    "\012\107\013\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\013\012\113\013\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserRecovery$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserRecovery$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserRecovery$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public int errorNumber = 0;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParserRecovery parser = new MPParserRecovery( scanner );
			parser.parse();
			
			if ( parser.errorNumber == 0)
				System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
			else
				System.out.println( "Analiza je zavrsena. Broj sintaksnih gresaka: " + parser.errorNumber );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserRecovery$actions {
  private final MPParserRecovery parser;

  /** Constructor */
  CUP$MPParserRecovery$actions(MPParserRecovery parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserRecovery$do_action(
    int                        CUP$MPParserRecovery$act_num,
    java_cup.runtime.lr_parser CUP$MPParserRecovery$parser,
    java.util.Stack            CUP$MPParserRecovery$stack,
    int                        CUP$MPParserRecovery$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserRecovery$result;

      /* select the action based on the action number */
      switch (CUP$MPParserRecovery$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= OPEN_BRACKET error 
            {
              Object RESULT = null;
		
	System.out.println("Nepravilno definisan Term u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= OPEN_BRACKET Expression CLOSED_BRACKET 
            {
              Object RESULT = null;
		
	System.out.println("Smena 32 => Term (Expression)");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Term ::= CONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).value;
		
    System.out.println("Smena 31 => Term CONST '" + c + "'!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Term ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).value;
		
    System.out.println("Smena 30 => Term ID '" + id + "'!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= GREATER_OR_EQUAL_TO 
            {
              Object RESULT = null;
		
    System.out.println("Smena 29 => RelOp greater or equal!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 28 => RelOp greater!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= NOT_EQUAL_TO 
            {
              Object RESULT = null;
		
    System.out.println("Smena 27 => RelOp not equal!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= EQUAL_TO 
            {
              Object RESULT = null;
		
    System.out.println("Smena 26 => RelOp equal!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelOp ::= LESS_OR_EQUAL_TO 
            {
              Object RESULT = null;
		
    System.out.println("Smena 25 => RelOp lower or equal!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
    System.out.println("Smena 24 => RelOp lower!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 23 => RelExpression!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelExpression ::= Term RelOp error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan term u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 22 => RelExpression!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 21 => AndExpression!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AndExpression ::= AndExpression error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje 'AND' operator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AndExpression ::= AndExpression AND error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan realcioni izraz u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 20 => AndExpression!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 19 => Expression!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje 'OR' operator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression OR error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definsan and izraz u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 18 => Expression!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WhileLoop ::= WHILE error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan izraz u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WhileLoop ::= WHILE Expression COLON error 
            {
              Object RESULT = null;
		
    System.out.println("nperavilno definisan statement u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WhileLoop ::= WHILE Expression COLON Statement error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje 'else' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WhileLoop ::= WHILE Expression COLON Statement ELSE error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan statement u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileLoop ::= WHILE Expression COLON Statement ELSE Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 17 => WhileLoop!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Block 
            {
              Object RESULT = null;
		
    System.out.println("Smena 16 => Statement!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ID error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).value;
		
    System.out.println("Nedostaje ':=' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).value;
		
    System.out.println("Nperavilno definisan izraz u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).value;
		
    System.out.println("Smena 15 => Statement '" + id + "'!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= WhileLoop 
            {
              Object RESULT = null;
		
    System.out.println("Smena 14 => Statement!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 13 => StatementList!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 12 => StatementList!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= BOOLEAN 
            {
              Object RESULT = null;
		
    System.out.println("Smena 11 => Type boolean!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= REAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 10 => Type real!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Object RESULT = null;
		
    System.out.println("Smena 9 => Type char!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= INTEGER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 8 => Type integer!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).value;
		
    System.out.println("Smena 7 => NameList '" + id + "'!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje ',' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList COMMA error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje identifikator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).value;
		
    System.out.println("Smena 6 => NameList '" + id + "'!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= NameList COLON error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan tip u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= NameList COLON Type error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje ';' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= NameList COLON Type SEMICOLON 
            {
              Object RESULT = null;
		
    System.out.println("Smena 5 => Declaration!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Variables ::= 
            {
              Object RESULT = null;
		
    System.out.println("Smena 4 => Variables!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Variables ::= Variables error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilna deklaracija u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Smena 3 => Variables!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisane promenljive u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN Variables StatementList error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje 'end' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= BEGIN Variables StatementList END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 2 => Block!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan blok u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM Block error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje '.' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Block DOT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 1 => Program!");

              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          return CUP$MPParserRecovery$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).value;
		RESULT = start_val;
              CUP$MPParserRecovery$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserRecovery$stack.elementAt(CUP$MPParserRecovery$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserRecovery$parser.done_parsing();
          return CUP$MPParserRecovery$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

