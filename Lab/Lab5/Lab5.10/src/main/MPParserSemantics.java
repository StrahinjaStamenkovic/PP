
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jan 12 05:37:06 CET 2022
//----------------------------------------------------
package main;
import java_cup.runtime.*;
import java.io.*;
import SymbolTable.*;
import java.util.ArrayList;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Wed Jan 12 05:37:06 CET 2022
  */
public class MPParserSemantics extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserSemantics() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserSemantics(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\003\005\000\002\004" +
    "\006\000\002\006\004\000\002\006\002\000\002\007\006" +
    "\000\002\017\005\000\002\017\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\005\004\000\002\005\003\000\002\010\003\000\002\010" +
    "\006\000\002\010\003\000\002\011\010\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\004\005\001\002\000\004\002\076\001" +
    "\002\000\004\006\007\001\002\000\004\005\075\001\002" +
    "\000\010\006\ufffd\020\ufffd\034\ufffd\001\002\000\010\006" +
    "\007\020\011\034\020\001\002\000\016\024\024\034\031" +
    "\035\022\036\026\037\032\040\027\001\002\000\006\010" +
    "\060\012\057\001\002\000\014\006\ufff1\007\ufff1\020\ufff1" +
    "\021\ufff1\034\ufff1\001\002\000\012\006\007\007\056\020" +
    "\011\034\054\001\002\000\014\006\ufff3\007\ufff3\020\ufff3" +
    "\021\ufff3\034\ufff3\001\002\000\010\006\ufffe\020\ufffe\034" +
    "\ufffe\001\002\000\012\006\ufff4\007\ufff4\020\ufff4\034\ufff4" +
    "\001\002\000\010\010\ufffa\012\ufffa\017\021\001\002\000" +
    "\016\024\024\034\031\035\022\036\026\037\032\040\027" +
    "\001\002\000\030\010\uffe0\011\uffe0\022\uffe0\023\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\001\002\000\014\010\uffee\011\uffee\022\uffee\023\050\025" +
    "\uffee\001\002\000\016\024\024\034\031\035\022\036\026" +
    "\037\032\040\027\001\002\000\006\011\045\022\046\001" +
    "\002\000\030\010\uffdf\011\uffdf\022\uffdf\023\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\001" +
    "\002\000\030\010\uffdd\011\uffdd\022\uffdd\023\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\001" +
    "\002\000\030\010\uffea\011\uffea\022\uffea\023\uffea\025\uffea" +
    "\026\043\027\037\030\036\031\042\032\041\033\040\001" +
    "\002\000\030\010\uffe3\011\uffe3\022\uffe3\023\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\001" +
    "\002\000\030\010\uffde\011\uffde\022\uffde\023\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\001" +
    "\002\000\014\010\uffec\011\uffec\022\uffec\023\uffec\025\uffec" +
    "\001\002\000\030\010\uffe2\011\uffe2\022\uffe2\023\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\016\024\024\034\031\035\022\036\026\037" +
    "\032\040\027\001\002\000\016\024\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\001\002\000\016\024\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\016" +
    "\024\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001" +
    "\002\000\016\024\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\001\002\000\016\024\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\001\002\000\016\024\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000\014\010" +
    "\uffeb\011\uffeb\022\uffeb\023\uffeb\025\uffeb\001\002\000\014" +
    "\006\ufff2\007\ufff2\020\ufff2\021\ufff2\034\ufff2\001\002\000" +
    "\016\024\024\034\031\035\022\036\026\037\032\040\027" +
    "\001\002\000\014\010\uffef\011\uffef\022\uffef\023\050\025" +
    "\uffef\001\002\000\016\024\024\034\031\035\022\036\026" +
    "\037\032\040\027\001\002\000\014\010\uffed\011\uffed\022" +
    "\uffed\023\uffed\025\uffed\001\002\000\006\022\046\025\053" +
    "\001\002\000\030\010\uffe1\011\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\001\002\000\004\017\021\001\002\000\012\006\ufff5\007" +
    "\ufff5\020\ufff5\034\ufff5\001\002\000\016\005\uffff\006\uffff" +
    "\007\uffff\020\uffff\021\uffff\034\uffff\001\002\000\004\034" +
    "\067\001\002\000\012\013\061\014\065\015\063\016\064" +
    "\001\002\000\004\011\ufff9\001\002\000\004\011\066\001" +
    "\002\000\004\011\ufff7\001\002\000\004\011\ufff6\001\002" +
    "\000\004\011\ufff8\001\002\000\010\006\ufffc\020\ufffc\034" +
    "\ufffc\001\002\000\006\010\ufffb\012\ufffb\001\002\000\006" +
    "\010\071\022\046\001\002\000\010\006\007\020\011\034" +
    "\054\001\002\000\004\021\073\001\002\000\010\006\007" +
    "\020\011\034\054\001\002\000\014\006\ufff0\007\ufff0\020" +
    "\ufff0\021\ufff0\034\ufff0\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\002\001\001\000\004\006\007" +
    "\001\001\000\016\004\012\005\013\007\015\010\016\011" +
    "\014\017\011\001\001\000\014\012\067\013\022\014\032" +
    "\015\027\020\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\012\010\054\011\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\024\013\022\014\032\015\027\020\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\051\013\022\014\032\015\027\020\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\043\020\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\046\014\032" +
    "\015\027\020\033\001\001\000\002\001\001\000\010\014" +
    "\050\015\027\020\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\012\010" +
    "\071\011\014\001\001\000\002\001\001\000\010\004\012" +
    "\010\073\011\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserSemantics$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserSemantics$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserSemantics$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



	public int errNo = 0;
   	public int warnNo = 0;
	
 	SymbolTable symbolTable;
    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParserSemantics parser = new MPParserSemantics( scanner );
			parser.parse();
			parser.checkWarnings();
			if (  parser.errNo == 0 && parser.warnNo == 0 )
				System.out.println( "Analiza je zavrsena. U kodu nema gresaka!" );
			else
				 System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }
   	public void checkWarnings()
   	{
      	SymbolNode current = symbolTable.getVariables();
      	while ( current != null )
      	{
      		Variable var = ( Variable ) current;
      		if ( var.last_def != -1 && var.last_use == -1 )
      		{
      			System.out.println( "Upozorenje: Promenljiva " + var.name + 
      				" je deklarisana, ali se nigde ne koristi." );
      			warnNo++;
      		}
      		else if ( var.last_def > var.last_use )
      		{
      			System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      			    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      			warnNo++;
      		}
      		current = current.next;
     	}		
   	}
   
   	public void syntax_error(Symbol cur_token)
   	{
   		  
  	}
   
   	public void report_error(String message, Object info)
   	{
   		System.out.print( message );
   	}
   
   	public int getLine()
   	{
   		return (( MPLexer) getScanner()).getLine();
   	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserSemantics$actions {
  private final MPParserSemantics parser;

  /** Constructor */
  CUP$MPParserSemantics$actions(MPParserSemantics parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserSemantics$do_action(
    int                        CUP$MPParserSemantics$act_num,
    java_cup.runtime.lr_parser CUP$MPParserSemantics$parser,
    java.util.Stack            CUP$MPParserSemantics$stack,
    int                        CUP$MPParserSemantics$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserSemantics$result;

      /* select the action based on the action number */
      switch (CUP$MPParserSemantics$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONST ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new Constant( parser.symbolTable.getType( "char" ), c );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(14/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONST ::= BOOLEANCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new Constant( parser.symbolTable.getType( "boolean" ), c );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(14/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONST ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new Constant( parser.symbolTable.getType( "real" ), c );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(14/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONST ::= INTEGERCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new Constant( parser.symbolTable.getType( "integer" ), c );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(14/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Term ::= OPEN_BRACKET Expression CLOSED_BRACKET 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		
	 RESULT = e;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Term ::= CONST 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
     RESULT = new ConstantExpression(c);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Term ::= ID 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
    Variable var = parser.symbolTable.getVar( id );
	RESULT = new VariableExpression(var);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(11/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= GREATER_OR_EQUAL_TO 
            {
              Integer RESULT = null;
		int geleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int geright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer ge = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT =  ge;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= GREATER 
            {
              Integer RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer g = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT =  g;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= NOT_EQUAL_TO 
            {
              Integer RESULT = null;
		int neleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer ne = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT =  ne;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= EQUAL_TO 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT =  e;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= LESS_OR_EQUAL_TO 
            {
              Integer RESULT = null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer le = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT =  le;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelOp ::= LESS 
            {
              Integer RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = l;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= Term 
            {
              Expression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
    RESULT = t;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(10/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelExpression ::= Term RelOp Term 
            {
              Expression RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Expression t1 = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int rOleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int rOright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Integer rO = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Expression t2 = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new RelationalExpression(t1,rO,t2);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(10/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= RelExpression 
            {
              Expression RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = r;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(9/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AndExpression ::= AndExpression AND RelExpression 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new And(a,r);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(9/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= AndExpression 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
    RESULT = a;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(8/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression OR AndExpression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new Or(e,a);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(8/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WhileLoop ::= WHILE Expression COLON Statement ELSE Statement 
            {
              WhileLoop RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new WhileLoop(e,s1,s2);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(7/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= Block 
            {
              Statement RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = b;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		
	Variable var = parser.symbolTable.getVar( id );
	RESULT = new Assignment(var,e);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= WhileLoop 
            {
              Statement RESULT = null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		WhileLoop wl = (WhileLoop)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = wl;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= Statement 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new Block();
	RESULT.addStatement(s);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(3/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= StatementList Statement 
            {
              Block RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Block sl = (Block)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = sl;
	RESULT.addStatement(s);

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(3/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOLEAN 
            {
              Type RESULT = null;
		
    RESULT = parser.symbolTable.getType( "boolean" );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Type RESULT = null;
		
    RESULT = parser.symbolTable.getType( "real" );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Type RESULT = null;
		
    RESULT = parser.symbolTable.getType( "char" );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Type RESULT = null;
		
    RESULT = parser.symbolTable.getType( "integer" );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(12/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = new ArrayList();
	RESULT.add( id );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(13/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
	RESULT = niz;
	RESULT.add(  id );

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(13/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= NameList COLON Type SEMICOLON 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		
    for ( int i=0; i<niz.size(); i++ )
	{
		String ime = (String) niz.get(i);
					   
		if ( ! parser.symbolTable.addVar( ime, t ) )
		{
			System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
        		"Promenljiva " + ime + " je vec deklarisana." );
    		parser.errNo++;
		}
	}

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Variables ::= 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(4/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(4/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= BEGIN Variables StatementList END 
            {
              Block RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Block sl = (Block)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		
	RESULT = sl;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Block DOT 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		
	RESULT = b;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		RESULT = start_val;
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserSemantics$parser.done_parsing();
          return CUP$MPParserSemantics$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

